

buildscript {
	repositories {
		mavenCentral()
		maven {url "http://repo.mycompany.com/maven2"}
	}
}

allprojects{
	apply plugin: 'java'
	
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	compileJava.options.encoding = 'UTF-8'

	repositories {	
		mavenCentral()
		maven {url "http://repo.mycompany.com/maven2"}
		
	}
}

def getReleaseDate() {
	println "release date generate"	
	return new Date().format('yyyyMMddHHmmss')
}


project.ext["releaseProperties"] = new Properties()
file("release.properties").withInputStream {
   stream -> releaseProperties.load(stream)
}


task newrelease{
	group 'release'
	doFirst{
		//println '---generate release path ----------------------------'
	} 
	doLast{
		def new_date = getReleaseDate();
		def new_path = releaseProperties.getProperty("releasePath") + "/" + releaseProperties.getProperty("releaseSite") + "/" + new_date;

		println '-new release path : ' + new_path
		
		def propertyFile  = file("release.properties");
		releaseProperties.setProperty("releaseDate",new_date);
   	 	releaseProperties.store(propertyFile.newWriter(), null);
    }
}

task release_front{
	group 'release'
	
	doFirst{		
	} 
	doLast{			
		copy{
		
			def release_path = releaseProperties.getProperty("releasePath") + "/" + releaseProperties.getProperty("releaseSite") + "/" + releaseProperties.getProperty("releaseDate") + "/front/"; 

			println '-copy front : ' + release_path;
			
			from "ws-scim-angular/dist/ws-scim-angular/"
    		into release_path
		}
    }
}
subprojects {
	task initSourceFolders {
	    sourceSets*.java.srcDirs*.each {
	        if( !it.exists() ) {
	            it.mkdirs()
	        }
	    }
	 
	    sourceSets*.resources.srcDirs*.each {
	        if( !it.exists() ) {
	            it.mkdirs()
	        }
	    }
	}
	
	task copy_libs{
		group 'release'
		
		dependsOn 'jar' 
		doFirst{		
		} 
		doLast{			
			copy{
			
				def release_path = releaseProperties.getProperty("releasePath") + "/" + releaseProperties.getProperty("releaseSite") + "/" + releaseProperties.getProperty("releaseDate") + "/libs/"; 

				println '-copy dependency library -: ' + release_path;
				
				from configurations.runtime
				exclude "**/ws-scim-*.jar"
	    		into release_path
			}
	    }
	}
	
	task release{
		group 'release'
		
		//dependsOn 'clean'
		dependsOn 'jar' 
		doFirst{		

		} 
		doLast{		
			def release_path = "../" + releaseProperties.getProperty("releasePath") + "/" + releaseProperties.getProperty("releaseSite") + "/" + releaseProperties.getProperty("releaseDate") + "/dist";
			
			println '-copy dist library -: ' + release_path;
			
			println 'copy dist library : ' + release_path + jar.archiveName; ;
		    copy {
		       from 'build/libs/' + jar.archiveName
		       into release_path
		    }
	    }
	}
	
	dependencies {
		compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
		compile group: 'org.codehaus.janino', name: 'janino', version: '3.0.8'
		compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
		
	    testImplementation 'junit:junit:4.12'
	}
}

